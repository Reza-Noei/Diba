// <auto-generated />
using System;
using Diba.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Diba.Core.Data.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20201204154310_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Diba.Core.Domain.Admin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Diba.Core.Domain.AdminMembership", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AdminId")
                        .HasColumnType("bigint");

                    b.Property<long>("AuthorityId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("AuthorityId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("AdminMemberships");
                });

            modelBuilder.Entity("Diba.Core.Domain.Authority", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modification")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifierId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifierId");

                    b.ToTable("Authorities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Modification = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            Active = true,
                            Creation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Modification = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Diba.Core.Domain.AuthorityPermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<long>("AuthorityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsGranted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AuthorityId");

                    b.ToTable("AuthorityPermissions");
                });

            modelBuilder.Entity("Diba.Core.Domain.BaseRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnName("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Title = "Secretary",
                            UserId = 2L
                        },
                        new
                        {
                            Id = 2L,
                            Title = "SuperAdmin",
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("Diba.Core.Domain.Collector", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("Collectors");
                });

            modelBuilder.Entity("Diba.Core.Domain.CollectorMembership", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AuthorityId")
                        .HasColumnType("bigint");

                    b.Property<long>("CollectorId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorityId");

                    b.HasIndex("CollectorId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("CollectorMemberships");
                });

            modelBuilder.Entity("Diba.Core.Domain.Constraints.Constraint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Constraints");
                });

            modelBuilder.Entity("Diba.Core.Domain.ContactInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CalleeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ContactInfos");
                });

            modelBuilder.Entity("Diba.Core.Domain.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EconomicCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RefererId")
                        .HasColumnType("bigint");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RefererId");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Diba.Core.Domain.CustomerMembership", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AuthorityId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorityId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("CustomerMemberships");
                });

            modelBuilder.Entity("Diba.Core.Domain.CustomerOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CollectorMembershipId")
                        .HasColumnType("bigint");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<long?>("DeliveryMembershipId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServiceDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ServiceTypeId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CollectorMembershipId");

                    b.HasIndex("DeliveryMembershipId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("UnitId");

                    b.ToTable("CustomerOrders");
                });

            modelBuilder.Entity("Diba.Core.Domain.Delivery", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("Diba.Core.Domain.DeliveryMembership", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AuthorityId")
                        .HasColumnType("bigint");

                    b.Property<long>("DeliveryId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorityId");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("DeliveryMemberships");
                });

            modelBuilder.Entity("Diba.Core.Domain.Invoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CustomerMembershipId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("EarnestMoney")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Reception")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SecretaryMembershipId")
                        .HasColumnType("bigint");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerMembershipId");

                    b.HasIndex("SecretaryMembershipId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("Diba.Core.Domain.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modification")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifierId")
                        .HasColumnType("bigint");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifierId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Creation = new DateTime(2020, 12, 4, 19, 13, 9, 211, DateTimeKind.Local).AddTicks(6994),
                            CreatorId = 1L,
                            Modification = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prefix = "935",
                            Title = "Default Organization"
                        });
                });

            modelBuilder.Entity("Diba.Core.Domain.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Diba.Core.Domain.QName", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("QuickAccessListId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuickAccessListId");

                    b.ToTable("QNames");
                });

            modelBuilder.Entity("Diba.Core.Domain.QuickAccessList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("QuickAccessLists");
                });

            modelBuilder.Entity("Diba.Core.Domain.RolePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<bool>("IsGranted")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Action = 2,
                            IsGranted = true,
                            Role = 0
                        },
                        new
                        {
                            Id = 2L,
                            Action = 1,
                            IsGranted = true,
                            Role = 0
                        },
                        new
                        {
                            Id = 3L,
                            Action = 3,
                            IsGranted = true,
                            Role = 0
                        },
                        new
                        {
                            Id = 4L,
                            Action = 4,
                            IsGranted = true,
                            Role = 0
                        },
                        new
                        {
                            Id = 5L,
                            Action = 1,
                            IsGranted = true,
                            Role = 2
                        });
                });

            modelBuilder.Entity("Diba.Core.Domain.Secretary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("Secretaries");

                    b.HasData(
                        new
                        {
                            Id = 2L,
                            RoleId = 1L
                        });
                });

            modelBuilder.Entity("Diba.Core.Domain.SecretaryMembership", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AuthorityId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("SecretaryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorityId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SecretaryId");

                    b.ToTable("SecretaryMemberships");

                    b.HasData(
                        new
                        {
                            Id = 2L,
                            AuthorityId = 1L,
                            OrganizationId = 1L,
                            SecretaryId = 2L
                        });
                });

            modelBuilder.Entity("Diba.Core.Domain.SuperAdmin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("SuerAdmins");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            RoleId = 2L
                        });
                });

            modelBuilder.Entity("Diba.Core.Domain.SuperAdminMembership", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AuthorityId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("SuperAdminId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorityId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SuperAdminId");

                    b.ToTable("SuperAdminMemberships");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AuthorityId = 2L,
                            OrganizationId = 1L,
                            SuperAdminId = 1L
                        });
                });

            modelBuilder.Entity("Diba.Core.Domain.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Creation = new DateTime(2020, 12, 4, 19, 13, 9, 204, DateTimeKind.Local).AddTicks(3587),
                            Password = "123456",
                            Username = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2L,
                            Creation = new DateTime(2020, 12, 4, 19, 13, 9, 209, DateTimeKind.Local).AddTicks(729),
                            Password = "123456",
                            Username = "Secretary"
                        });
                });

            modelBuilder.Entity("Diba.Core.Domain.Admin", b =>
                {
                    b.HasOne("Diba.Core.Domain.BaseRole", "Role")
                        .WithOne()
                        .HasForeignKey("Diba.Core.Domain.Admin", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Diba.Core.Domain.AdminMembership", b =>
                {
                    b.HasOne("Diba.Core.Domain.Admin", "Admin")
                        .WithMany("Memberships")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diba.Core.Domain.Authority", "Authority")
                        .WithMany()
                        .HasForeignKey("AuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diba.Core.Domain.Organization", "Organization")
                        .WithMany("AdminMemberships")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Diba.Core.Domain.Authority", b =>
                {
                    b.HasOne("Diba.Core.Domain.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("Diba.Core.Domain.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifierId");
                });

            modelBuilder.Entity("Diba.Core.Domain.AuthorityPermission", b =>
                {
                    b.HasOne("Diba.Core.Domain.Authority", "Authority")
                        .WithMany("Permissions")
                        .HasForeignKey("AuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Diba.Core.Domain.BaseRole", b =>
                {
                    b.HasOne("Diba.Core.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Diba.Core.Domain.Collector", b =>
                {
                    b.HasOne("Diba.Core.Domain.BaseRole", "Role")
                        .WithOne()
                        .HasForeignKey("Diba.Core.Domain.Collector", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Diba.Core.Domain.CollectorMembership", b =>
                {
                    b.HasOne("Diba.Core.Domain.Authority", "Authority")
                        .WithMany()
                        .HasForeignKey("AuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diba.Core.Domain.Collector", "Collector")
                        .WithMany("Memberships")
                        .HasForeignKey("CollectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diba.Core.Domain.Organization", "Organization")
                        .WithMany("CollectorMemberships")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Diba.Core.Domain.ContactInfo", b =>
                {
                    b.HasOne("Diba.Core.Domain.Customer", "Customer")
                        .WithMany("ContactInfos")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Diba.Core.Domain.Customer", b =>
                {
                    b.HasOne("Diba.Core.Domain.Organization", "Referer")
                        .WithMany()
                        .HasForeignKey("RefererId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diba.Core.Domain.BaseRole", "Role")
                        .WithOne()
                        .HasForeignKey("Diba.Core.Domain.Customer", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Diba.Core.Domain.CustomerMembership", b =>
                {
                    b.HasOne("Diba.Core.Domain.Authority", "Authority")
                        .WithMany()
                        .HasForeignKey("AuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diba.Core.Domain.Customer", "Customer")
                        .WithMany("Memberships")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diba.Core.Domain.Organization", "Organization")
                        .WithMany("CustomerMemberships")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Diba.Core.Domain.CustomerOrder", b =>
                {
                    b.HasOne("Diba.Core.Domain.CollectorMembership", "CollectorMembership")
                        .WithMany("Orders")
                        .HasForeignKey("CollectorMembershipId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Diba.Core.Domain.DeliveryMembership", "DeliveryMembership")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryMembershipId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Diba.Core.Domain.Invoice", null)
                        .WithMany("Orders")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("Diba.Core.Domain.QName", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Diba.Core.Domain.QName", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Diba.Core.Domain.Delivery", b =>
                {
                    b.HasOne("Diba.Core.Domain.BaseRole", "Role")
                        .WithOne()
                        .HasForeignKey("Diba.Core.Domain.Delivery", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Diba.Core.Domain.DeliveryMembership", b =>
                {
                    b.HasOne("Diba.Core.Domain.Authority", "Authority")
                        .WithMany()
                        .HasForeignKey("AuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diba.Core.Domain.Delivery", "Delivery")
                        .WithMany("Memberships")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diba.Core.Domain.Organization", "Organization")
                        .WithMany("DeliveryMemberships")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Diba.Core.Domain.Invoice", b =>
                {
                    b.HasOne("Diba.Core.Domain.CustomerMembership", null)
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerMembershipId");

                    b.HasOne("Diba.Core.Domain.SecretaryMembership", null)
                        .WithMany("Invoices")
                        .HasForeignKey("SecretaryMembershipId");
                });

            modelBuilder.Entity("Diba.Core.Domain.Organization", b =>
                {
                    b.HasOne("Diba.Core.Domain.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("Diba.Core.Domain.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifierId");
                });

            modelBuilder.Entity("Diba.Core.Domain.QName", b =>
                {
                    b.HasOne("Diba.Core.Domain.QuickAccessList", null)
                        .WithMany("Items")
                        .HasForeignKey("QuickAccessListId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Diba.Core.Domain.Secretary", b =>
                {
                    b.HasOne("Diba.Core.Domain.BaseRole", "Role")
                        .WithOne()
                        .HasForeignKey("Diba.Core.Domain.Secretary", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Diba.Core.Domain.SecretaryMembership", b =>
                {
                    b.HasOne("Diba.Core.Domain.Authority", "Authority")
                        .WithMany()
                        .HasForeignKey("AuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diba.Core.Domain.Organization", "Organization")
                        .WithMany("SecretaryMemberships")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Diba.Core.Domain.Secretary", "Secretary")
                        .WithMany("Memberships")
                        .HasForeignKey("SecretaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Diba.Core.Domain.SuperAdmin", b =>
                {
                    b.HasOne("Diba.Core.Domain.BaseRole", "Role")
                        .WithOne()
                        .HasForeignKey("Diba.Core.Domain.SuperAdmin", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Diba.Core.Domain.SuperAdminMembership", b =>
                {
                    b.HasOne("Diba.Core.Domain.Authority", "Authority")
                        .WithMany()
                        .HasForeignKey("AuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diba.Core.Domain.Organization", "Organization")
                        .WithMany("SuperAdminMemberships")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Diba.Core.Domain.SuperAdmin", "SuperAdmin")
                        .WithMany("Memberships")
                        .HasForeignKey("SuperAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Diba.Core.Domain.User", b =>
                {
                    b.HasOne("Diba.Core.Domain.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");
                });
#pragma warning restore 612, 618
        }
    }
}
